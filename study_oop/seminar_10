/*Тема: Множественное наследование, параметрический полиморфизм

Разработать шаблонный класс описания точки в трехмерном пространстве в однородных координатах с использованием множественного наследования, виртуальных функций и параметрического полиморфизма 
для хранения координат различных типов (например, int, double, float и т.д.).
Для этого:
1.	Разработать шаблонный класс Point2D для хранения координат точки на плоскости с информационными членами x и y заданного типа на основе шаблона и конструктором с параметрами для задания 
координат (можно использовать список инициализации).
2.	Разработать шаблонный класс Z с информационным членом z заданного типа на основе шаблона и конструктором с параметром для задания значения информационного члена z.
3.	Разработать шаблонный класс H с информационным членом h заданного типа на основе шаблона и конструктором с параметром для задания значения информационного члена h.
Разработать шаблонный класс Point3Dh наследующий классы Point2D, Z и H, определить конструктор для задания четырех координат точки и метод для вывода информации о координатах точки.
Создать вектор для хранения объектов Point3Dh созданных на основе шаблона, для этого потребуется определить базовый класс с виртуальным методом show() и унаследовать его в классе Point3Dh, 
создать вектор для хранения указателей на базовый класс.
Для вывода информации о координатах объектов, хранящихся в векторе, определить в классе Point3Dh метод show() для вывода координат, независимо от типа данных координат.

Написать программу, использующую шаблонный класс Point3Dh, в программе создать вектор из 5 объектов класса Point3Dh для типов int, short, double, float, long. задать координаты в 
конструкторе и вывести информацию об этих объектах (их координаты).
*/
#include <iostream>
#include <vector>
#include <clocale>

using namespace std;
class base {
public:
	virtual void show() {};
	//virtual - base() = default;
};

//Класс Point2D
template <class T> class Point2D {
protected:
	T x, y;
public:
	Point2D(T x, T y) : x(x), y(y) {};
};

template <class T> class Z {
protected:
	T z;
public:
	Z(T z) : z(z) {};
};

template <class T> class H {
protected:
	T h;
public:
	H(T h) : h(h) {};
};
//Класс Point3D
template <class T> class Point3Dh : public Point2D<T>, public Z<T>, public H<T>, base {
public:
	Point3Dh(T x, T y, T z, T h) : Point2D <T>(x, y), Z <T>(z), H<T>(h) {};
	void show() {
		cout << "Однородные координаты: " << endl;
		cout << this->x << ", " << this->y << ", " << this->z << ", " << this->h << endl;
		try {
			if (this->h == 0) {
				throw invalid_argument("Четвертая координата (h) не может быть равна 0");

			}
			cout << "Реальные координаты: " << endl;
			cout << this->x / this->h << ", " << this->y / this->h << ", " << this->z / this->h << endl;
		}
		catch (...) {  // не получилось добавить элемент
			cout << "Четвертая координата (h) не может быть равна 0\n";
		}

	}
};

int main() {
	setlocale(LC_ALL, "ru");
	vector<base*> v;
	Point3Dh<int> a(1, 2, 3, 0); // координаты имеют тип int
	Point3Dh<short> b(10, 20, 30, 1); // координаты имеют тип short
	Point3Dh<double> c(1.5, 2.5, 3.5, 1.0); // координаты имеют тип double
	Point3Dh<float> d(0.1, 0.2, 0.3, 1.0); // координаты имеют тип float
	Point3Dh<long> e(100000000000, 200000000000000, 3000000000000, 100000000000); // координаты имеют тип long

	// Добавляем объекты в вектор
	v.push_back((base*)&a);
	v.push_back((base*)&b);
	v.push_back((base*)&c);
	v.push_back((base*)&d);
	v.push_back((base*)&e);

	for (auto point : v) {
		point->show();
	}

	return 0;
}

